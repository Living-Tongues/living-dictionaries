<script lang="ts" context="module">
   export const height = 1200
</script>

<script lang="ts">
  import { Button, ReactiveSet } from 'svelte-pieces';
  import Map from './Map.svelte';
  import Marker from './Marker.svelte';
  import Popup from './Popup.svelte';
  import GeoJSONSource from '../sources/GeoJSONSource.svelte';
  import Layer from './Layer.svelte';
  import { polygonFeatureCoordinates } from '../../utils/polygonFromCoordinates';
  import MapboxStatic from '../static/MapboxStatic.svelte';
  import { convertPointsIntoRegion } from '../static/shapeGeoJson';

  export let openFirst = false;
  export let autoDrawShape = true;
  // name="Draw Polygon with Updating Static Map
</script>

<ReactiveSet
  input={[
    { longitude: -95, latitude: 44 },
    { longitude: -105, latitude: 35 },
    { longitude: -105, latitude: 42 },
    { longitude: -96, latitude: 37 },
  ]}
  let:value={points}
  let:add
  let:remove>
  <div class="mb-4" style="height: 350px;">
    <Map
      lng={-95}
      lat={44}
      zoom={3}
      on:click={({ detail: { lng, lat } }) => {
        add({ longitude: lng, latitude: lat });
      }}>
      {#each points as point, index (point)}
        <Marker
          draggable
          on:dragend={({ detail: { lng, lat } }) => {
            remove(point);
            add({ longitude: lng, latitude: lat });
          }}
          lng={point.longitude}
          lat={point.latitude}>
          <Popup open={index === 0 && openFirst}>
            <Button
              form="simple"
              size="sm"
              color="red"
              onclick={() => remove(point)}><span class="i-fa-trash-o" /></Button>
          </Popup>
        </Marker>
      {/each}
      {#if autoDrawShape && points.length > 2}
        <GeoJSONSource
          data={{
            type: 'Feature',
            geometry: {
              type: 'Polygon',
              coordinates: polygonFeatureCoordinates(points),
            },
            properties: undefined,
          }}>
          <Layer
            options={{
              type: 'fill',
              paint: {
                'fill-color': '#0080ff',
                'fill-opacity': 0.5,
              },
            }} />
          <Layer
            options={{
              type: 'line',
              paint: {
                'line-color': '#555555',
                'line-width': 1,
              },
            }} />
        </GeoJSONSource>
      {/if}
    </Map>
  </div>
  <MapboxStatic
    regions={[
      {
        coordinates: convertPointsIntoRegion(points),
      },
    ]}
    width={200}
    height={200} />
  <pre>{JSON.stringify(points, null, 2)}</pre>
</ReactiveSet>
