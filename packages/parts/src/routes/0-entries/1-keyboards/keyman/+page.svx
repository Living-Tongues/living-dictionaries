<script lang="ts">
  import { glossingLanguages } from '$lib';

  import InputWrapper from '$lib/entries/keyboards/keyman/InputWrapper.svelte';
  import Keyman from '$lib/entries/keyboards/keyman/Keyman.svelte';
  import Textarea from '$lib/entries/keyboards/keyman/Textarea.svelte';
  import { additionalKeyboards } from '$lib/glosses/glossing-languages';
  import { Story } from 'kitbook';
  import Button from 'svelte-pieces/ui/Button.svelte';

  let value = '';
  let paragraph = '';
</script>

<!-- prettier-ignore -->
# Keyman Keyboard

<Story name="input" knobs={{ bcp: 'am', show: false, canChooseKeyboard: true }} let:props={{ bcp, show, canChooseKeyboard }} let:set>
  <div>Value: {value}</div>
  <Keyman>
    <InputWrapper {bcp} {show} {canChooseKeyboard} bind:value />
  </Keyman>
  Has no keyboard:
  <Button form="menu" size="sm" onclick={() => set('bcp', 'en')} active={'en' === bcp}
    >English (en)</Button>
</Story>

An input can be placed in the default slot and Keyman will attach to the first child element (it
will only work if that element is an input or textarea):

<Story name="Assamese - slotted input">
  <Keyman>
    <InputWrapper bcp="as">
      <input type="text" bind:value class="form-input block w-full" />
    </InputWrapper>
  </Keyman>
  <div>Value: {value}</div>
</Story>

<Story name="Assamese textarea">
  <Keyman>
    <Textarea bcp="as" bind:value={paragraph} />
  </Keyman>
  <pre class="pl-3">{paragraph}</pre>
</Story>

<!-- prettier-ignore -->
## Notes

If ever needed, `InputWrapper` could be updated to allow passing in a targeted element.

### Useful Links

- [KeymanWeb docs](https://keyman.com/developer/keymanweb/)
- [KeymanWeb API](https://help.keyman.com/DEVELOPER/engine/web/15.0/reference/)
- [Angular Setup](https://medium.com/@jwbowdoin/setup-on-screen-keyboards-in-over-1-000-languages-using-keyman-11-in-an-angular-7-web-app-3c3eb846585c)
