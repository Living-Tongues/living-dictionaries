CREATE TABLE example_sentences (
  id uuid unique primary key NOT NULL, -- generated on client so users can create a sentence offline and keep editing it
  "text" text NOT NULL,
  translation jsonb,
  created_at timestamp with time zone DEFAULT now() NOT NULL,
  created_by uuid NOT NULL REFERENCES auth.users (id),
  updated_at timestamp with time zone DEFAULT now() NOT NULL,
  updated_by uuid NOT NULL REFERENCES auth.users (id),
  deleted timestamp with time zone
);

ALTER TABLE example_sentences ENABLE ROW LEVEL SECURITY;

CREATE TABLE senses_in_example_sentences (
  sense_id uuid NOT NULL REFERENCES senses (id),
  example_sentence_id uuid NOT NULL REFERENCES example_sentences (id),
  created_by uuid NOT NULL REFERENCES auth.users (id),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted timestamp with time zone,
  PRIMARY KEY (sense_id, example_sentence_id)
);

ALTER TABLE senses_in_example_sentences ENABLE ROW LEVEL SECURITY;

CREATE TYPE example_sentence_tables AS ENUM ('example_sentences', 'senses_in_example_sentences');
CREATE TYPE example_sentence_columns AS ENUM ('deleted', 'text', 'translation');

CREATE TABLE example_sentence_updates (
  id uuid unique primary key NOT NULL, -- generated by client via uuidv4 so it can be idempotent and they can send it multiple times without repeated effect in case of network issues
  user_id uuid NOT NULL REFERENCES auth.users (id),
  dictionary_id text NOT NULL, -- add REFERENCES dictionaries (id) once Firestore data migrated
  sense_id uuid NOT NULL REFERENCES senses (id),
  example_sentence_id uuid NOT NULL REFERENCES example_sentences (id),
  "timestamp" timestamp with time zone DEFAULT now() NOT NULL,
  "table" example_sentence_tables NOT NULL,
  "column" example_sentence_columns, -- could be null if just add a new sense-example_sentence relationship
  new_value text, 
  old_value text
);

ALTER TABLE example_sentence_updates ENABLE ROW LEVEL SECURITY;

CREATE OR REPLACE FUNCTION apply_example_sentence_updates()
RETURNS TRIGGER AS $$
DECLARE
  column_data_type regtype;
BEGIN
  IF NEW.table = 'example_sentences' THEN
  
    SELECT atttypid::regtype INTO column_data_type
    FROM pg_attribute
    WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'example_sentences')
      AND attname = NEW.column::text;

    EXECUTE format(
      'INSERT INTO example_sentences 
      (id, %I, created_by, updated_by, created_at, updated_at) 
      VALUES ($1::uuid, $2::%s, $3, $3, now(), now()) 
      ON CONFLICT (id) DO UPDATE 
      SET %I = $2::%s, updated_by = $3, updated_at = now()', 
      NEW.column,
      column_data_type,
      NEW.column,
      column_data_type
    ) USING NEW.example_sentence_id, NEW.new_value, NEW.user_id;

    INSERT INTO senses_in_example_sentences -- ensure this sense has a relationship to this example sentence
    (sense_id, example_sentence_id, created_by, created_at) 
    VALUES (NEW.sense_id, NEW.example_sentence_id, NEW.user_id, now()) 
    ON CONFLICT (sense_id, example_sentence_id) DO NOTHING;

  ELSIF NEW.table = 'senses_in_example_sentences' THEN

    IF NEW.column = 'deleted' THEN
      UPDATE senses_in_example_sentences 
      SET deleted = now() 
      WHERE sense_id = NEW.sense_id AND example_sentence_id = NEW.example_sentence_id;
    ELSE
      INSERT INTO senses_in_example_sentences -- add this sense to existing example sentence
      (sense_id, example_sentence_id, created_by, created_at) 
      VALUES (NEW.sense_id, NEW.example_sentence_id, NEW.user_id, now()) 
      ON CONFLICT (sense_id, example_sentence_id) DO NOTHING;
    END IF;

  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER on_example_sentence_updates
AFTER INSERT ON example_sentence_updates
FOR EACH ROW 
EXECUTE FUNCTION apply_example_sentence_updates();

-- Regarding Example Sentence deletions:
-- 1. Can delete the example sentence which will remove it from all senses (the entries_view will only pull in sentences where deleted is null)
-- 2. Can delete the relationship between a sense and an example sentence which will only remove it from being shown on a sense but it still exists as a sentence in the dictionary
